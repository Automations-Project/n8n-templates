<n8n-demo workflow="{"name":"[n8n] Github Public Repository Releases RSS To Telegram","nodes":[{"parameters":{"pollTimes":{"item":[{"hour":0}]},"feedUrl":"=https://github.com/appsmithorg/appsmith/releases.atom"},"name":"RSS Feed Trigger","type":"n8n-nodes-base.rssFeedReadTrigger","typeVersion":1,"position":[100,460],"notesInFlow":true,"notes":"Edit with your GitHub URL."},{"parameters":{"assignments":{"assignments":[{"id":"fe6e2a01-bd78-46dd-8025-050c00ad1196","name":"telegram bot token","value":"7185874279:AAFnw5Ngzl8GOLBnBB5WedbEaBMBr9HGxt4","type":"string"},{"id":"3ee2cada-9ff1-4625-a9ed-78f4890c4862","name":"Telegram Channel / User ID","value":"346637642","type":"string"}]},"includeOtherFields":true,"options":{}},"name":"Config","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[700,460],"notesInFlow":true,"notes":"🤖 Enter Chat ID & Bot Token"},{"parameters":{"content":"## Readme\nUsage:\n- Update the `Rss Feed Trigger` with your own Github Repository `ID` and `Repo`.\n `https://github.com/(Username Here)/(Repo Here)/releases.atom`\n- Update the `Config Node` with your own `Telegram Bot Token` & `Channel` or `Account` ID.\n- Update the Message in `Final Node` As it contain promotional information regarding the repository used which is n8n in this usecase.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![N8N Creator Profile - Nskha](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)","height":585.0039435122314,"width":2020.2466020291768,"color":6},"name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[39,280]},{"parameters":{"html":"={{ $json }}","destinationKey":"markdown","options":{"bulletMarker":"-"}},"name":"Convert HTML Rss to Markdown","type":"n8n-nodes-base.markdown","typeVersion":1,"position":[920,460],"notesInFlow":true,"notes":"📝From HTML to Markdown"},{"parameters":{"jsCode":"// Define section headers to split the markdown and set max character length for message segments\nconst sectionHeaders = [\"### Bug Fixes\", \"### Features\"];\nconst maxCharLength = 2000; // Maximum character length for a Telegram message\n\n/**\n * Converts Markdown text to HTML format.\n * @param {string} markdown - Markdown formatted text\n * @returns {string} - HTML formatted text\n */\nfunction markdownToHtml(markdown) {\n    // Convert Markdown to HTML by replacing Markdown syntax with HTML tags\n    let html = markdown\n        .replace(/^### (.*$)/gim, '<b>$1</b>') // Convert level 3 headings to bold\n        .replace(/^## (.*$)/gim, '<b>$1</b>') // Convert level 2 headings to bold\n        .replace(/^# (.*$)/gim, '<b>$1</b>') // Convert level 1 headings to bold\n        .replace(/\\n\\n\\n/gim, '\\n\\n') // Reduce triple new lines to double new lines\n        .replace(/\\*\\*(.*?)\\*\\*/gim, '<b>$1</b>') // Convert bold syntax\n        .replace(/\\`(.*?)\\`/gim, '<code>$1</code>') // Convert inline code syntax\n        .replace(/\\*(.*?)\\*/gim, '<i>$1</i>') // Convert italic syntax\n        .replace(/\\[([^\\[]+)\\]\\(([^\\)]+)\\)/gim, '<a href=\"$2\">$1</a>'); // Convert link syntax\n\n    // Process each line individually to handle specific cases\n    html = html.split('\\n').map(line => {\n        const urlCount = (line.match(/<a href=\"http[s]?:\\/\\/[^\\s]+\">/g) || []).length;\n        if (urlCount === 2) { // Wrap lines containing exactly two URLs in blockquote\n            line = `<blockquote>\\uD83D\\uDD04 ${line}</blockquote>\\n`;\n        }\n        return line;\n    }).join('\\n');\n\n    return html;\n}\n\n/**\n * Splits the text into sections based on provided headers.\n * @param {string} text - Complete text to split\n * @param {Array} sectionHeaders - Headers to use as split points\n * @returns {Array} - Array of text sections\n */\nfunction splitTextBySections(text, sectionHeaders) {\n  const sections = [];\n  let lastIndex = 0;\n\n  sectionHeaders.forEach((header, index) => {\n    const currentIndex = text.indexOf(header, lastIndex);\n    if (currentIndex !== -1) {\n      if (lastIndex !== 0) sections.push(text.substring(lastIndex, currentIndex));\n      lastIndex = currentIndex;\n    }\n    if (index === sectionHeaders.length - 1) sections.push(text.substring(lastIndex));\n  });\n\n  return sections.filter(section => section.trim() !== \"\");\n}\n\n/**\n * Splits large sections into smaller ones to fit within the max character length.\n * @param {Array} sections - Array of text sections\n * @param {number} maxCharLength - Maximum character length per section\n * @returns {Array} - Array of split sections\n */\nfunction splitSectionsToFit(sections, maxCharLength) {\n    return sections.reduce((acc, section) => {\n        let htmlSection = markdownToHtml(section);\n        while (htmlSection.length > 0) {\n            if (calculateVisibleLength(htmlSection) <= maxCharLength) {\n                acc.push(htmlSection);\n                break;\n            }\n            let splitIndex = findSplitIndex(htmlSection, maxCharLength);\n            let part = htmlSection.substring(0, splitIndex);\n            acc.push(part);\n            htmlSection = htmlSection.substring(splitIndex).trim();\n        }\n        return acc;\n    }, []);\n}\n\n/**\n * Calculates visible character length, excluding HTML tags and URLs.\n * @param {string} text - Text to measure\n * @returns {number} - Visible text length\n */\nfunction calculateVisibleLength(text) {\n    let visibleText = text.replace(/<[^>]*>/g, '').replace(/http[s]?:\\/\\/[^\\s]+/g, '');\n    return visibleText.length;\n}\n\n/**\n * Finds an appropriate index to split text without breaking HTML tags or URLs.\n * @param {string} text - Text to split\n * @param {number} maxCharLength - Maximum visible characters to include\n * @returns {number} - Index to split at\n */\nfunction findSplitIndex(text, maxCharLength) {\n    let currentIndex = 0;\n    let lengthCount = 0;\n    while (currentIndex < text.length) {\n        let remainingText = text.substring(currentIndex);\n        let nextTagOrUrl = remainingText.match(/<[^>]*>|http[s]?:\\/\\/[^\\s]+/);\n        if (nextTagOrUrl) {\n            let nonTagContentLength = nextTagOrUrl.index;\n            if (lengthCount + nonTagContentLength > maxCharLength) break;\n            lengthCount += nonTagContentLength;\n            currentIndex += nextTagOrUrl.index + nextTagOrUrl[0].length;\n        } else {\n            lengthCount += remainingText.length;\n            if (lengthCount > maxCharLength) break;\n            currentIndex = text.length;\n        }\n    }\n    return currentIndex;\n}\n\n// Load Markdown content and throw error if it is missing or invalid\nconst originalText = $item(\"0\").$node[\"Convert HTML Rss to Markdown\"].json[\"markdown\"][\"content\"];\nif (!originalText) {\n  throw new Error('Markdown field is missing or not a string');\n}\n\n// Process text to split into sections and then fit within the max character length\nconst sections = splitTextBySections(originalText, sectionHeaders);\nconst messages = splitSectionsToFit(sections, maxCharLength);\n\n// Prepare messages for output with required properties\nreturn messages.map(message => ({ json: { text: message, parse_mode: \"HTML\" } }));\n"},"name":"Clean & split the content for telegram limits. ","type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,460],"notesInFlow":true,"notes":"💦 if texts +2K characters"},{"parameters":{"options":{}},"name":"Loop posting the content based on size","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1340,460],"notesInFlow":true,"notes":"🤖 loop posting the updates"},{"parameters":{"assignments":{"assignments":[{"id":"8d444290-cf8a-40f5-8f41-57388bcfac3c","name":"result.message_id","value":"={{ $json.result.message_id }}","type":"number"}]},"options":{}},"name":"Save Message ID for Reply","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[1880,460]},{"parameters":{"url":"=https://api.telegram.org/bot{{ $item(\"0\").$node[\"Config\"].json[\"telegram bot token\"] }}/sendMessage","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"chat_id","value":"={{ $item(\"0\").$node[\"Config\"].json[\"Telegram Channel / User ID\"] }}"},{"name":"text","value":"={{ $runIndex === 0 ? '<pre class=\"language-Releases\"><b>New Update '+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V')+'</b></pre>\\n\\n' : '' }}{{ $json.text }}"},{"name":"parse_mode","value":"HTML"},{"name":"link_preview_options","value":"={\n  \"is_disabled\": {{ $runIndex >= 0 ? 'false' : 'true' }},\n  \"prefer_large_media\": true,\n  \"show_above_text\": true,\n  \"url\": \"{{ $item(\"0\").$node[\"RSS Feed Trigger\"].json[\"link\"] }}\"\n}"},{"name":"disable_notification","value":"true"},{"name":"reply_markup","value":"={{ $runIndex === 0 ? JSON.stringify({\n  \"inline_keyboard\": [\n    [\n      {\n        \"text\": \"Read more about New Update \"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V'),\n        \"url\": \"https://f.customer.men/\"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"link\"].replace(\"https://\",\"\")\n      }\n    ]\n  ]\n}) : '' }}"},{"name":"reply_to_message","value":"={{ $runIndex >= 1 ? $node[\"Save Message ID for Reply\"].json[\"result\"][\"message_id\"] : '' }}"}]},"options":{}},"name":"Telegram Loop Message Parts","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[1620,560],"notesInFlow":true,"notes":"📥GET: /bot"},{"parameters":{},"name":"No Operation, do nothing","type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1620,380]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"f238c1ae-2460-48f7-add5-6ddbbc17c64b","leftValue":"={{ $json }}","rightValue":"","operator":{"type":"object","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"name":"If not empty","type":"n8n-nodes-base.if","typeVersion":2,"position":[260,460]},{"parameters":{"conditions":{"dateTime":[{"value1":"={{ $json[\"isoDate\"] }}","value2":"={{ $now.minus({hours:24 }).toISO() }}"}]}},"name":"If it was published after","type":"n8n-nodes-base.if","position":[480,460],"typeVersion":1,"continueOnFail":true}],"connections":{"RSS Feed Trigger":{"main":[[{"node":"If not empty","type":"main","index":0}]]},"Config":{"main":[[{"node":"Convert HTML Rss to Markdown","type":"main","index":0}]]},"Convert HTML Rss to Markdown":{"main":[[{"node":"Clean & split the content for telegram limits. ","type":"main","index":0}]]},"Clean & split the content for telegram limits. ":{"main":[[{"node":"Loop posting the content based on size","type":"main","index":0}]]},"Loop posting the content based on size":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}],[{"node":"Telegram Loop Message Parts","type":"main","index":0}]]},"Save Message ID for Reply":{"main":[[{"node":"Loop posting the content based on size","type":"main","index":0}]]},"Telegram Loop Message Parts":{"main":[[{"node":"Save Message ID for Reply","type":"main","index":0}]]},"If not empty":{"main":[[{"node":"If it was published after","type":"main","index":0}],[{"node":"No Operation, do nothing","type":"main","index":0}]]},"If it was published after":{"main":[[{"node":"Config","type":"main","index":0}],[{"node":"No Operation, do nothing","type":"main","index":0}]]}},"active":"false","settings":{"executionOrder":"v1","timezone":"Europe/Berlin","saveExecutionProgress":true,"saveManualExecutions":true,"callerPolicy":"workflowsFromSameOwner","executionTimeout":600,"errorWorkflow":""},"staticData":"","pinData":{},"meta":{"templateCredsSetupCompleted":false},"tags":[{"createdAt":"2024-04-30T20:24:38.187Z","updatedAt":"2024-04-30T20:24:38.187Z","id":"UnNzRmVlZFJlYWRUcmlnZ2Vy","name":"RssFeedReadTrigger"},{"createdAt":"2024-04-30T20:24:38.187Z","updatedAt":"2024-04-30T20:24:38.187Z","id":"TWFya2Rvd24","name":"Markdown"},{"createdAt":"2024-04-30T20:24:38.188Z","updatedAt":"2024-04-30T20:24:38.188Z","id":"Q29kZQ","name":"Code"},{"createdAt":"2024-04-30T20:24:38.188Z","updatedAt":"2024-04-30T20:24:38.188Z","id":"U3BsaXRJbkJhdGNoZXM","name":"SplitInBatches"},{"createdAt":"2024-04-30T20:24:38.188Z","updatedAt":"2024-04-30T20:24:38.188Z","id":"SHR0cFJlcXVlc3Q","name":"HttpRequest"},{"createdAt":"2024-04-30T20:24:38.188Z","updatedAt":"2024-04-30T20:24:38.188Z","id":"Tm9PcA","name":"NoOp"}]}" collapseformobile="true" clicktointeract="true" theme="dark" ></n8n-demo>